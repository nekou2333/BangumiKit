// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

public extension Paths.V0.Search {
    var characters: Characters {
        Characters(path: path + "/characters")
    }

    struct Characters {
        /// Path: `/v0/search/characters`
        public let path: String

        /// 角色搜索
        ///
        /// ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动
        ///
        /// 目前支持的筛选条件包括:
        /// - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。
        public func post(limit: Int? = nil, offset: Int? = nil, _ body: PostRequest? = nil) -> Request<BangumiKit.PagedCharacter> {
            Request(path: path, method: "POST", query: makePostQuery(limit, offset), body: body, id: "searchCharacters")
        }

        private func makePostQuery(_ limit: Int?, _ offset: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(limit, forKey: "limit")
            encoder.encode(offset, forKey: "offset")
            return encoder.items
        }

        public struct PostRequest: Encodable {
            public var keyword: String
            /// 不同条件之间是 `且` 的关系
            public var filter: Filter?

            /// 不同条件之间是 `且` 的关系
            public struct Filter: Encodable {
                /// 无权限的用户会直接忽略此字段，不会返回 R18 角色。
                ///
                /// 默认或者 `null` 会返回包含 R18 的所有搜索结果。
                ///
                /// `true` 只会返回 R18 角色。
                ///
                /// `false` 只会返回非 R18 角色。
                public var isNsfw: Bool?

                public init(isNsfw: Bool? = nil) {
                    self.isNsfw = isNsfw
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(isNsfw, forKey: "nsfw")
                }
            }

            public init(keyword: String, filter: Filter? = nil) {
                self.keyword = keyword
                self.filter = filter
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(keyword, forKey: "keyword")
                try values.encodeIfPresent(filter, forKey: "filter")
            }
        }
    }
}
