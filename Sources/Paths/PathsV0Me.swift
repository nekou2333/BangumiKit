// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

public extension Paths.V0 {
    var me: Me {
        Me(path: path + "/me")
    }

    struct Me {
        /// Path: `/v0/me`
        public let path: String

        /// Get User
        ///
        /// 返回当前 Access Token 对应的用户信息
        public var get: Request<GetResponse> {
            Request(path: path, method: "GET", id: "getMyself")
        }

        public struct GetResponse: Decodable {
            public var id: Int
            /// 唯一用户名，初始与 UID 相同，可修改一次
            public var username: String
            public var nickname: String
            /// 用户组 - 1 = 管理员 - 2 = Bangumi 管理猿 - 3 = 天窗管理猿 - 4 = 禁言用户 - 5 = 禁止访问用户 - 8 = 人物管理猿 - 9 = 维基条目管理猿 - 10 = 用户 - 11 = 维基人
            public var userGroup: Int
            /// Example:
            ///
            /// {
            ///   "large" : "https:\/\/lain.bgm.tv\/pic\/user\/l\/000\/00\/00\/1.jpg?r=1391790456",
            ///   "medium" : "https:\/\/lain.bgm.tv\/pic\/user\/m\/000\/00\/00\/1.jpg?r=1391790456",
            ///   "small" : "https:\/\/lain.bgm.tv\/pic\/user\/s\/000\/00\/00\/1.jpg?r=1391790456"
            /// }
            public var avatar: BangumiKit.Avatar
            /// 个人签名
            public var sign: String
            public var email: AnyJSON
            public var regTime: AnyJSON
            /// 用户设置的时区偏移，以小时为单位。比如 GMT+8（shanghai/beijing）为 8
            public var timeOffset: Int?

            public init(
                id: Int,
                username: String,
                nickname: String,
                userGroup: Int,
                avatar: BangumiKit.Avatar,
                sign: String,
                email: AnyJSON,
                regTime: AnyJSON,
                timeOffset: Int? = nil
            ) {
                self.id = id
                self.username = username
                self.nickname = nickname
                self.userGroup = userGroup
                self.avatar = avatar
                self.sign = sign
                self.email = email
                self.regTime = regTime
                self.timeOffset = timeOffset
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decode(Int.self, forKey: "id")
                self.username = try values.decode(String.self, forKey: "username")
                self.nickname = try values.decode(String.self, forKey: "nickname")
                self.userGroup = try values.decode(Int.self, forKey: "user_group")
                self.avatar = try values.decode(BangumiKit.Avatar.self, forKey: "avatar")
                self.sign = try values.decode(String.self, forKey: "sign")
                self.email = try values.decode(AnyJSON.self, forKey: "email")
                self.regTime = try values.decode(AnyJSON.self, forKey: "reg_time")
                self.timeOffset = try values.decodeIfPresent(Int.self, forKey: "time_offset")
            }
        }
    }
}
