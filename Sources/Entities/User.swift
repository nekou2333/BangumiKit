// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// 实际的返回值可能包括文档未声明的 `url` 字段，此字段主要用于开发者从 api 响应直接转跳到网页。
/// 客户端开发者请不用依赖于此特性，此字段的值随时可能会改变。
///
/// Example:
///
/// {
///   "avatar" : {
///     "large" : "https:\/\/lain.bgm.tv\/pic\/user\/l\/000\/00\/00\/1.jpg?r=1391790456",
///     "medium" : "https:\/\/lain.bgm.tv\/pic\/user\/m\/000\/00\/00\/1.jpg?r=1391790456",
///     "small" : "https:\/\/lain.bgm.tv\/pic\/user\/s\/000\/00\/00\/1.jpg?r=1391790456"
///   },
///   "id" : 1,
///   "nickname" : "Sai🖖",
///   "sign" : "Awesome!",
///   "user_group" : 1,
///   "username" : "sai"
/// }
public struct User: Codable {
    public var id: Int
    /// 唯一用户名，初始与 UID 相同，可修改一次
    public var username: String
    public var nickname: String
    /// 用户组 - 1 = 管理员 - 2 = Bangumi 管理猿 - 3 = 天窗管理猿 - 4 = 禁言用户 - 5 = 禁止访问用户 - 8 = 人物管理猿 - 9 = 维基条目管理猿 - 10 = 用户 - 11 = 维基人
    public var userGroup: Int
    /// Example:
    ///
    /// {
    ///   "large" : "https:\/\/lain.bgm.tv\/pic\/user\/l\/000\/00\/00\/1.jpg?r=1391790456",
    ///   "medium" : "https:\/\/lain.bgm.tv\/pic\/user\/m\/000\/00\/00\/1.jpg?r=1391790456",
    ///   "small" : "https:\/\/lain.bgm.tv\/pic\/user\/s\/000\/00\/00\/1.jpg?r=1391790456"
    /// }
    public var avatar: Avatar
    /// 个人签名
    public var sign: String

    public init(id: Int, username: String, nickname: String, userGroup: Int, avatar: Avatar, sign: String) {
        self.id = id
        self.username = username
        self.nickname = nickname
        self.userGroup = userGroup
        self.avatar = avatar
        self.sign = sign
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.username = try values.decode(String.self, forKey: "username")
        self.nickname = try values.decode(String.self, forKey: "nickname")
        self.userGroup = try values.decode(Int.self, forKey: "user_group")
        self.avatar = try values.decode(Avatar.self, forKey: "avatar")
        self.sign = try values.decode(String.self, forKey: "sign")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(username, forKey: "username")
        try values.encode(nickname, forKey: "nickname")
        try values.encode(userGroup, forKey: "user_group")
        try values.encode(avatar, forKey: "avatar")
        try values.encode(sign, forKey: "sign")
    }
}
